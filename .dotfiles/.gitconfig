
[include]
    path = ~/.dotfiles/.gitconfig.private

[core]
    editor = nano
    filemode = true
    whitespace = trailing-space, tab-in-indent, tabwidth=4
	pager = diff-so-fancy | less --tabs=4 -RFX

[alias]
	# List aliases
	aliases = config --get-regexp alias

    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
    # get pwd
    root = rev-parse --show-toplevel
    # Shows all commits that are in local master but not in any remote repository master branches.
    not-pushed = log --branches --not --remotes
    # Undo last commits
    undo = reset --hard ^HEAD
    # delete files recurcive
    rmf = rm -rf
    head = log -1
    # url of origin, about 99% of what I use git config --list for
    cloneurl = config --get remote.origin.url
    url = cloneurl
    # ignore local changes to a file
    ignore-file-changes = update-index --assume-unchanged
    # undo-ignore local changes to a file
    ignore-file-changes-undo = update-index --no-assume-unchanged
    submodule-update = submodule update --remote --merge
    unstage = restore --staged
    # Get the number of commits per committer
    no-commit = !git shortlog --summary | sort -n

    # My life is full of typos
    ad = add
    as = add
    ass = add
    cinnut = commit
    cmit = commit
    cmmit = commit
    cmomit = commit
    cmt = commit
    co = commit
    comimt = commit
    comit = commit
    comit = commit
    comkmit = commit
    commi = commit
    commt = commit
    dif = diff
    dff = diff
    doff = diff
    dfi = diff
    df = diff
    lo = log
    lgo = log
    lof = log
    loh = log
    ocmit = commit
    ocmmit = commit
    og = log
    omit = commit
    ommit = commit
    satus = status
    sta = status
    st = status
    stt = status
    stat = status
    stats = status
    syay = status
    statsu = status
    statu = status
    stts = status
    sttus = status
    pusj = push
    push = pushup
    pus = push --allow-unrelated-histories origin $(git symbolic-ref --short HEAD)
    pul = pull

    # Pretty useful
    ci = !hub ci-status
    clone = clone --progress
    commit = commit -S
    last = log -1 HEAD
    pull = --allow-unrelated-histories origin $(git symbolic-ref --short HEAD)
    pushup = !git push --set-upstream origin $(git symbolic-ref --short HEAD)
    pushf = push -f
    # Clone a repository including all submodules
    clone-everything = clone --recursive --progress

    # Show the diff between the latest commit and the current state
    diff-commits = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Life savers

    # Put any file changed up for commits
    addr = "!fnc(){ git add $(git status | $(which grep) "modified:" | cut -f2 -d ":" | xargs); }; fnc"

    pushd = "!fnc() { \
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD); \
        git push origin ${BRANCH_NAME}; \
        read -p 'Enter [y/n] if you want to create a PR: ' response; \
        if [ \"${response}\" != \"${response#[Yy]}\" ]; then hub pull-request --no-edit -f; fi \
        };fnc"

    # Create pull request on GitHub to devel remote branch if it exists else, to master
    create-pr = "!f() { \
        REMOTE="devel"; \
        if ! git show-ref --quiet refs/heads/devel; then REMOTE="master"; fi; \
        BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD); \
        git push -u origin "${BRANCH_NAME}"; \
        hub pull-request -b "${REMOTE}" -h "${BRANCH_NAME}" --no-edit; \
        };f"

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch
    merge-pr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -s -S -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
        }; f"

	# Switch to a branch, creating it if necessary and if it exist pull latest changes
	goto = "!f() { \
        git checkout -b \"$1\" 2> /dev/null || git checkout -q \"$1\" && \
        git branch --set-upstream-to=origin/\"$1\" \"$1\" && \
        bash -c 'git pull --allow-unrelated-histories origin $(git symbolic-ref --short HEAD) -q -f & >/dev/null 2>&1' >/dev/null 2>&1; \
        }; f"

    # Need I say more
    commit-amend = "!fnc() { \
        echo "Amending to previous commit with HEAD commit msg!"; echo; \
        git commit --amend -S -anC HEAD; \
        };fnc"

    commit-amend-push = "!fnc() { \
        echo "Amending to previous commit with HEAD commit msg!"; echo; \
        git commit --amend -S -anC HEAD; \
        git push -f; \
        };fnc"

    find-str = "!fnc() { git grep "$1" "$(git show-ref --heads)"; }; fnc"

    fetch-all-branches = "!func() { \
        git checkout --detach && git fetch origin '+refs/heads/*:refs/heads/*';\
        };func"

    cleanup-branches = "!func() { \
        git fetch -pa && \
        git branch --merged | egrep -v '(^\\*|master|dev|devel)' | xargs git branch -d;\
        };func"

    push-all = "!fnc() { git push && git push --tags; }; fnc"

[color]
    ui = auto
    branch = auto
    diff = auto
    interactive = auto
    status = auto

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
    whitespace = red reverse

[color "diff"]
    meta = 227
    frag = magenta bold
    old = red bold
    new = green bold
    commit = 227 bold
    whitespace = red reverse

[color "branch"]
    current = yellow reverse
    local = yellow bold
    remote = green bold
    plain = red bold

[color "status"]
    added = blue bold
    changed = green bold
    untracked = red

[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[commit]
    verbose = true

[pretty]
    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

[push]
    default = upstream
    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out.
    followTags = true

[status]
    showStash = true

[http]
    sslVerify = false

[credential]
    helper = store

[init]
	templatedir = /home/mmphego/GitHub/Productivity_Projects/pre-commit-hooks

[commit]
	gpgsign = true
	template = /home/mmphego/GitHub/Productivity_Projects/pre-commit-hooks/commit-msg-template/commit-msg-template.txt

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
